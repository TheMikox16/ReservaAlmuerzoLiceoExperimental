//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PaginaWeb_LiceoExperimental
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NoticiasEntities : DbContext
    {
        public NoticiasEntities()
            : base("name=NoticiasEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LineaNoticia> LineaNoticia { get; set; }
        public virtual DbSet<Noticia> Noticia { get; set; }
        public virtual DbSet<Prioridad> Prioridad { get; set; }
    
        public virtual int Agregar_Noticia(string titulo, string descripcion, byte[] imagen, byte[] archivo)
        {
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(byte[]));
    
            var archivoParameter = archivo != null ?
                new ObjectParameter("Archivo", archivo) :
                new ObjectParameter("Archivo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar_Noticia", tituloParameter, descripcionParameter, imagenParameter, archivoParameter);
        }
    
        public virtual ObjectResult<ConsultarNoticia_ID_Result> ConsultarNoticia_ID(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarNoticia_ID_Result>("ConsultarNoticia_ID", iDParameter);
        }
    
        public virtual ObjectResult<ConsultarNoticia_PorFecha_Result> ConsultarNoticia_PorFecha(Nullable<System.DateTime> fecha)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarNoticia_PorFecha_Result>("ConsultarNoticia_PorFecha", fechaParameter);
        }
    
        public virtual ObjectResult<ConsultarNoticia_PorTitulo_Result> ConsultarNoticia_PorTitulo(string titulo)
        {
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultarNoticia_PorTitulo_Result>("ConsultarNoticia_PorTitulo", tituloParameter);
        }
    
        public virtual int EliminarLineaNoticia(Nullable<int> lineaNoticiaID)
        {
            var lineaNoticiaIDParameter = lineaNoticiaID.HasValue ?
                new ObjectParameter("LineaNoticiaID", lineaNoticiaID) :
                new ObjectParameter("LineaNoticiaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarLineaNoticia", lineaNoticiaIDParameter);
        }
    
        public virtual int EliminarNoticia(Nullable<long> lineaNoticiaID)
        {
            var lineaNoticiaIDParameter = lineaNoticiaID.HasValue ?
                new ObjectParameter("LineaNoticiaID", lineaNoticiaID) :
                new ObjectParameter("LineaNoticiaID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarNoticia", lineaNoticiaIDParameter);
        }
    
        public virtual ObjectResult<ListarNoticias_Result> ListarNoticias()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarNoticias_Result>("ListarNoticias");
        }
    
        public virtual ObjectResult<ListarTodasNoticias_Result> ListarTodasNoticias()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListarTodasNoticias_Result>("ListarTodasNoticias");
        }
    
        public virtual int Modificar_Noticia(Nullable<long> noticiaID, string titulo, string descripcion, byte[] imagen, byte[] archivo)
        {
            var noticiaIDParameter = noticiaID.HasValue ?
                new ObjectParameter("NoticiaID", noticiaID) :
                new ObjectParameter("NoticiaID", typeof(long));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(byte[]));
    
            var archivoParameter = archivo != null ?
                new ObjectParameter("Archivo", archivo) :
                new ObjectParameter("Archivo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Modificar_Noticia", noticiaIDParameter, tituloParameter, descripcionParameter, imagenParameter, archivoParameter);
        }
    }
}
